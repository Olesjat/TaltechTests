package ee.taltech;// Generated by Selenium IDE


import com.google.common.io.Files;
import io.qameta.allure.Allure;
import io.qameta.allure.Attachment;
import org.junit.jupiter.api.*;
import org.junit.jupiter.params.*;
import org.junit.jupiter.params.provider.*;
import org.openqa.selenium.*;
import org.openqa.selenium.chrome.*;

import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.*;
import java.util.concurrent.*;

import static ee.taltech.SeleniumUtils.*;


/**
 * The type Taltech selenium test.
 */
// Основной класс для запуска тестирования сайта
public class TaltechSeleniumTest {
	/**
	 * The Driver.
	 * Объявляем объект для работы с драйвером, который будет управлять браузером.
	 */
	static WebDriver driver;

	/**
	 * Before all.
	 */
	@BeforeAll
	static void beforeAll() {
		// Селениум требует явно указать, где лежит драйвер браузера, а Селенид делает автоматически
		System.setProperty("webdriver.chrome.driver", "C:\\Autotests\\chromedriver.exe");

		// Подготавливаем опции для браузера Chrome.
		ChromeOptions options = getChromeOptions();

		// Конфигурацию для драйвера для Селениума надо создавать вручную,
		// Создаем драйвер на основе подготовленных опций
		driver = new ChromeDriver(options);

		// Раскрываем браузер на весь экран
		driver.manage().window().maximize();

		// Устанавливаем время таймаута ожидания элементов на 20 секунд
		driver.manage().timeouts().implicitlyWait(20, TimeUnit.SECONDS);
	}

	/**
	 * Tear down.
	 */
	@AfterEach
	public void tearDown() {
		// Возвращаемся на главное окно
		// Для переключения на нужную вкладку приходится писать больше кода
		// Собираем список всех вкладок браузера
		ArrayList<String> tabs = new ArrayList<String> (driver.getWindowHandles());
		// Первый элемент из списка вкладок - основная тестируемая вкладка,
		// переключаемся на нее
		driver.switchTo().window(tabs.get(0));
	}

	/**
	 * Menu test.
	 *
	 * @param language the language
	 * @param text     the text
	 * @throws IOException the io exception
	 */
// https://www.baeldung.com/parameterized-tests-junit-5
	@ParameterizedTest(name = "{index} {0} : {1}")
	@CsvSource(
			{
					"ENGLISH,Academic calendar",
					"ESTONIAN,Akadeemiline kalender",

					"ENGLISH,Rules",
					"ESTONIAN,Õppekorralduse reeglid",

					"ENGLISH,Internship",
					"ESTONIAN,Praktika",

					"ENGLISH,Regulations and documents",
					"ESTONIAN,Juhendid ja õigusaktid",

					"ENGLISH,Scholarships",
					"ESTONIAN,Stipendiumid",

					"ENGLISH,Tuition fees",
					"ESTONIAN,Õppeteenuste tasumäärad",

					"ENGLISH,Changing the study programme",
					"ESTONIAN,Õppekava vahetamine",

					"ENGLISH,Recognition of prior learning",
					"ESTONIAN,VÕTA",

					"ENGLISH,Academic leave",
					"ESTONIAN,Akadeemiline puhkus",

					"ENGLISH,Minor specialities",
					"ESTONIAN,Kõrvalerialad",

					"ENGLISH,Feedback",
					"ESTONIAN,Tagasiside hea tava",

					"ENGLISH,General information",
					"ESTONIAN,Üldinfo",

					"ENGLISH,Timetable",
					"ESTONIAN,Treeningkalender",

					"ENGLISH,Exchange studies",
					"ESTONIAN,Vahetusõpingud",

					"ENGLISH,Visiting students",
					"ESTONIAN,Külalisüliõpilasena õppimine",

					"ENGLISH,Rules of Study load",
					"ESTONIAN,Õppekoormuse reeglid",

					"ENGLISH,Video guide",
					"ESTONIAN,Videojuhend",

					"ENGLISH,Study Information System",
					"ESTONIAN,ÕIS"
			})
	public void MenuTest(String language, String text) throws IOException {
		// Ищем на сайте кнопку с текстом на конкретном языке и кликаем по нему
		// Драйвер явно передаем в качестве параметра, так как он не виден глобально во
		// время выполнения автоматических тестов, Селенид же в свою очередь сам выбирает драйвер
		try {
			find(driver, language, text).click();
		}
		catch (Exception exception)
		{
			// Просим Аллюр добавить к результату теста приложение в виде скриншота
			Allure.addAttachment("Element not found!", new ByteArrayInputStream(((TakesScreenshot) driver).getScreenshotAs(OutputType.BYTES)));

			// Повторно отправляем исключение, чтобы тест считался непройденным.
			throw exception;
		}

	}

	/**
	 * After all.
	 */
// Селениум не умеет самостоятельно закрывать браузер после своей работы, поэтому
	// просим метод, который срабатывает после выполнения всех остальных методов, закрыть драйвер.
	@AfterAll
	static void afterAll() {
		driver.quit();
	}
}
